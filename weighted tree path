Now slightly addition to the problem
If we have weight associated with the tree

A (1)
|_B (2)
| |_H (8)
|
|_C (3)
| |_E (5)
| |_F (6)
|   |
|   |_G (7)
|_ D (4)
   |_I (9)

q)t:([]n:`A`B`C`D`E`F`G`H`I;p:`A`A`A`A`C`C`F`B`D)
q)update w:1+til count[t] from `t
`t
q)t
n p w
-----
A A 1
B A 2
C A 3
D A 4
E C 5
F C 6
G F 7
H B 8
I D 9

Results => where sw is the sum of weight from the child to itâ€™s own node.
n p w sw
--------
A A 1 45
B A 2 10
C A 3 21
D A 4 13
E C 5 5
F C 6 13
G F 7 7
H B 8 8
I D 9 9

Gokul:
getAllC:{distinct raze ({exec n from t where p in x}\)x}
update c:getAllC each t.n from `t
select n,p,w,sw:sum each ((t.n)!t.w)t.c from t

Yifei:
f:{reverse ({exec first p from t where n=x}\)x}

then we can make use of it to get the answer for question 2:
update sw:{sum t.w * x in/: f each t.n} each n from t


William:
The idea is once we get the path we can sum it.
Just use the @ is good enough.

This is to get the parent index.
pi:t.n?t.p

To get the sum is 
update sw:@[(count t)#0;(pi scan) each i;+;w] from t






